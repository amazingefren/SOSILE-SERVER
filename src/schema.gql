# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PostCount {
  likes: Float!
  comments: Float!
}

type CommentCount {
  likes: Float!
}

type Post {
  id: Float!
  author: User
  content: String!
  date: DateTime!
  updated: DateTime!
  history: [PostHistory!]
  likes: [User!]
  liked: Boolean
  comments: [Post!]
  parents: [Post!]
  _count: PostCount
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Float!
  content: String!
  date: DateTime
  likes: [User!]
  author: User
  post: Post
  _count: CommentCount
}

type PostHistory {
  id: Float
  content: String
  date: DateTime
  parent: Post
}

type FeedPost {
  id: Float!
  author: User
  content: String!
  date: DateTime!
  updated: DateTime!
  history: [PostHistory!]
  liked: Boolean
  _count: PostCount
}

type UserProfile {
  id: Int!
  biography: String!
  userId: Float!
  username: Int!
}

type UserCount {
  followers: Float!
  following: Float!
}

type User {
  id: Int!
  username: String!
  displayName: String!
  email: String!
  profile: UserProfile
  posts: [Post!]
  comments: [Comment!]
  postLikes: [Post!]
  commentLikes: [Comment!]
  followed: Boolean
  following: [User!]
  followers: [User!]
  _count: UserCount
}

type AuthUser {
  id: Int!
  username: String!
  displayName: String!
  email: String!
  profile: UserProfile
  posts: [Post!]
  comments: [Comment!]
  postLikes: [Post!]
  commentLikes: [Comment!]
  followed: Boolean
  following: [User!]
  followers: [User!]
  _count: UserCount
  role: String!
  token: String!
}

type Query {
  debugUsers: [User!]!
  findUserById(id: Float!): User
  whoAmI: User!
  userSearch(where: String!): [User!]!
  findUserByUsername(username: String!): User!
  debugPosts: [Post!]!
  findPost(id: Float!): Post!
  findPostByUser(where: PostWhereInput): [Post!]
  getFeed: [FeedPost!]
  AuthCheck: Boolean!
}

input PostWhereInput {
  id: Float
  username: String
}

type Mutation {
  userFollow(user: Float!): Boolean!
  userUnfollow(user: Float!): Boolean!
  createPost(data: CreatePostInput!): Post!
  editPost(postId: Float!, data: CreatePostInput!): Post!
  deletePost(postId: Float!): Boolean!
  postLikeToggle(postId: Float!): Boolean!
  createComment(postId: Float!, data: CreatePostInput!): Comment!
  deleteComment(commentId: Float!): Boolean!
  AuthRegisterUser(data: AuthRegisterUserInput!): AuthUser!
  AuthLoginUser(data: AuthLoginUserInput!): AuthUser!
  AuthRefresh: Boolean!
  AuthLogout: Boolean!
}

input CreatePostInput {
  content: String!
}

input AuthRegisterUserInput {
  email: String!
  username: String!
  password: String!
  displayName: String!
}

input AuthLoginUserInput {
  username: String!
  password: String!
}
